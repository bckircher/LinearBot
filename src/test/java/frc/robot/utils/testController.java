// Copyright (c) 2021 FRC Team 2881 - The Lady Cans
//
// Open Source Software; you can modify and/or share it under the terms of BSD
// license file in the root directory of this project.

package frc.robot.utils;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import edu.wpi.first.wpilibj.Joystick;
import frc.robot.Constants;

// JUnit test of the Controller class.
public class testController {
  // Create a mock of the Joystick class to use for the unit tests.
  private final Joystick m_joystick = mock(Joystick.class);

  // A unit test for the individual axes of a controller. This is a
  // parameterized test, and uses the parameters generated by the method
  // (below) with the same name.
  @ParameterizedTest
  @MethodSource
  void individualAxes(double lx, double ly, double rx, double ry, double l2,
                      double r2, double deadBand) {
    // Set the dead band for this test case.
    Controller.setDeadBand(deadBand);

    // Set the joystick to respond with the given values for the various analog
    // axes.
    when(m_joystick.getRawAxis(Constants.Controller.kAnalogLeftX)).
      thenReturn(lx);
    when(m_joystick.getRawAxis(Constants.Controller.kAnalogLeftY)).
      thenReturn(ly);
    when(m_joystick.getRawAxis(Constants.Controller.kAnalogRightX)).
      thenReturn(rx);
    when(m_joystick.getRawAxis(Constants.Controller.kAnalogRightY)).
      thenReturn(ry);
    when(m_joystick.getRawAxis(Constants.Controller.kAnalogLeft2)).
      thenReturn(l2);
    when(m_joystick.getRawAxis(Constants.Controller.kAnalogRight2)).
      thenReturn(r2);

    // Get the values of the various analog axes from the controller.
    double alx = Controller.getLeftX(m_joystick);
    double aly = Controller.getLeftY(m_joystick);
    double arx = Controller.getRightX(m_joystick);
    double ary = Controller.getRightY(m_joystick);
    double al2 = Controller.getLeft2(m_joystick);
    double ar2 = Controller.getRight2(m_joystick);

    // Check that the returned values make sense.
    assertTrue(((Math.abs(lx) < deadBand) && (alx == 0.0)) ||
               ((Math.abs(lx) >= deadBand) && (alx <= 1.0)));
    assertTrue(((Math.abs(ly) < deadBand) && (aly == 0.0)) ||
               ((Math.abs(ly) >= deadBand) && (aly <= 1.0)));
    assertTrue(((Math.abs(rx) < deadBand) && (arx == 0.0)) ||
               ((Math.abs(rx) >= deadBand) && (arx <= 1.0)));
    assertTrue(((Math.abs(ry) < deadBand) && (ary == 0.0)) ||
               ((Math.abs(ry) >= deadBand) && (ary <= 1.0)));
    assertTrue(((Math.abs((l2 + 1) / 2) < deadBand) && (al2 == 0.0)) ||
               ((Math.abs((l2 + 1) / 2) >= deadBand) && (al2 <= 1.0)));
    assertTrue(((Math.abs((r2 + 1) / 2) < deadBand) && (ar2 == 0.0)) ||
               ((Math.abs((r2 + 1) / 2) >= deadBand) && (ar2 <= 1.0)));
  }

  // Generates a test data set for the individual axis test.
  static Stream<Arguments> individualAxes() {
    // Create a stream builder for storing all the test data sets.
    Stream.Builder<Arguments> builder = Stream.builder();
      
    // Loop through the two dead band values.
    for(int deadBand = 0; deadBand < 2; deadBand++) {
      // Loop through the values for the individual axes.
      for(int value = -100; value <= 100; value++) {
        // Add a data set for this value in each of the axes.
        builder.add(Arguments.of(value / 100.0, 0.0, 0.0, 0.0, -1.0, -1.0,
                                 deadBand / 10.0));
        builder.add(Arguments.of(0.0, value / 100.0, 0.0, 0.0, -1.0, -1.0,
                                 deadBand / 10.0));
        builder.add(Arguments.of(0.0, 0.0, value / 100.0, 0.0, -1.0, -1.0,
                                 deadBand / 10.0));
        builder.add(Arguments.of(0.0, 0.0, 0.0, value / 100.0, -1.0, -1.0,
                                 deadBand / 10.0));
        builder.add(Arguments.of(0.0, 0.0, 0.0, 0.0, value / 100.0, -1.0,
                                 deadBand / 10.0));
        builder.add(Arguments.of(0.0, 0.0, 0.0, 0.0, -1.0, value / 100.0,
                                 deadBand / 10.0));
      }
    }

    // Create and return an argument stream of these data sets.
    return builder.build();
  }
}